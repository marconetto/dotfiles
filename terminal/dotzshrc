
# FUNCTIONS -------------------------------------------------
source $HOME/dotfiles/terminal/zshfunctions.zsh
source $HOME/dotfiles/terminal/commonfunctions.sh
install_fzf
# -----------------------------------------------------------

# PROMPT -----------------------------------------------------
autoload -U colors && colors
setopt auto_cd
setopt multios
setopt prompt_subst
source $HOME/dotfiles/terminal/zshprompt.zsh
# -----------------------------------------------------------


# PLUGINS----------------------------------------------------
install_zsh_plugin "zsh-autosuggestions"
install_zsh_plugin "zsh-syntax-highlighting"
install_zsh_plugin "zsh-history-substring-search"
autoload -U compaudit compinit; compinit
# -----------------------------------------------------------


# ZSH OPTIONS----------------------------------------------
ZSH_HIGHLIGHT_STYLES[arg0]=fg=#7daea3
HYPHEN_INSENSITIVE="true"
ENABLE_CORRECTION="true"
COMPLETION_WAITING_DOTS="true"
CASE_SENSITIVE="false"
ZSH_DISABLE_COMPFIX="true"
setopt COMPLETE_ALIASES
setopt APPEND_HISTORY
setopt EXTENDED_HISTORY
setopt HIST_FIND_NO_DUPS
setopt HIST_IGNORE_ALL_DUPS
setopt HIST_SAVE_NO_DUPS
setopt INC_APPEND_HISTORY

# allows autocompletion typing any part of the name, not just beginning of it
if [[ "$CASE_SENSITIVE" = true ]]; then
  zstyle ':completion:*' matcher-list 'r:|=*' 'l:|=* r:|=*'
else
  if [[ "$HYPHEN_INSENSITIVE" = true ]]; then
    zstyle ':completion:*' matcher-list 'm:{a-zA-Z-_}={A-Za-z_-}' 'r:|=*' 'l:|=* r:|=*'
  else
    zstyle ':completion:*' matcher-list 'm:{a-zA-Z}={A-Za-z}' 'r:|=*' 'l:|=* r:|=*'
  fi
fi

HISTFILE=~/.zsh_history
HISTSIZE=10000
SAVEHIST=10000

# setup window title (zsh / nvim / lima)
autoload -Uz add-zsh-hook
add-zsh-hook precmd set-title-precmd
add-zsh-hook preexec set-title-preexec

# remove underline while typing commands
(( ${+ZSH_HIGHLIGHT_STYLES} )) || typeset -A ZSH_HIGHLIGHT_STYLES
ZSH_HIGHLIGHT_STYLES[path]=none
ZSH_HIGHLIGHT_STYLES[path_prefix]=none
ZSH_HIGHLIGHT_STYLES[precommand]=fg=yellow,normal  # style for sudo
ZSH_HIGHLIGHT_STYLES[autodirectory]=fg=#7daea3,normal

# zstyle ':completion:*:*:cdr:*:*' menu select
# zstyle ':completion:*' menu select

#unsetopt menu_complete   # do not autoselect the first completion entry
#unsetopt flowcontrol
#setopt auto_menu         # show completion menu on successive tab press
#setopt complete_in_word
#setopt always_to_end

setopt COMPLETE_IN_WORD
# don't move the cursor to the end AFTER a completion was inserted
setopt NO_ALWAYS_TO_END

setopt LIST_PACKED

# zstyle ':completion:*:*:*:*:*' menu no-select
zstyle ':completion:*:*:*:*:*' menu select yes=50
# zstyle ':completion:*:*:*:*:*' menu select=long
# zstyle ':completion:*:*:*:*:*' menu select yes
zstyle ':completion:*' special-dirs true
zstyle ':completion:*' list-colors ''

# Categorize completion suggestions with headings:
zstyle ':completion:*' group-name ''
zstyle ':completion:*:descriptions' format %F{2}--- %d ---%f
zstyle ':completion:*' rehash true # to get new binaries into PATH

# better complete with the most recent files first
zstyle ':completion:*' file-sort access
# zstyle ':completion:*' file-sort modification


zstyle ':completion:*:*:(vim|nvim|vi|cat|more|less):*' ignored-patterns '*.(o|png|pptx|pdf|docx|jpeg|jpg|xlsx)'

# https://stackoverflow.com/questions/72705377/zsh-how-to-limit-file-completion-to-current-directory-only-like-bash
unset '_comps[source]'

# for dirs
set -o autopushd

# KEYBOARD --------------------------------------------------
bindkey '^[[1;5C' forward-word               # "option key + arrow"
bindkey '^[[1;5D' backward-word              # "option key + arrow"

bindkey '^?' backward-delete-char            # [Backspace] - delete backward
if [[ "${terminfo[kdch1]}" != "" ]]; then
  bindkey "${terminfo[kdch1]}" delete-char   # [Delete] - delete forward
else
  bindkey "^[[3~" delete-char
  bindkey "^[3;5~" delete-char
  bindkey "\e[3~" delete-char
fi

bindkey -v
# go back to insert mode also with ESC (-a = -M vicmd)
bindkey -a "^[" vi-insert

# press v in cmd mode to open vim and edit file
autoload edit-command-line
zle -N edit-command-line
bindkey -M vicmd v edit-command-line

# alt+arrows to jump words
bindkey "\e\e[D" backward-word
bindkey "\e\e[C" forward-word
bindkey "^[OH" beginning-of-line
bindkey "^[OF" end-of-line

bindkey '^[[1;5C' forward-word    # [alt-RightArrow] - move forward one word
bindkey '^[[1;5D' backward-word   # [alt-LeftArrow] - move backward one word

# fix incremental search when enabling vim-mode
bindkey "^[OA" up-line-or-beginning-search
bindkey "^[OB" down-line-or-beginning-search
bindkey -M vicmd "k" up-line-or-beginning-search
bindkey -M vicmd "j" down-line-or-beginning-search

# fix after vim mode activated
bindkey "^K" kill-line
bindkey "^_" undo
# bindkey "^0" redo
bindkey "^a" beginning-of-line
bindkey "^e" end-of-line

# bindkey "^e" fzf-history-widget
# bindkey -r "^h"
bindkey "^h" vi-backward-delete-char
bindkey "^x" delete-char

# shift+enter for completing suggestion and shift+cmd+enter for accepting and
# executing suggestion. This requires add this keystrokes in iterm2
bindkey '^[xxy' autosuggest-accept
bindkey '^[xxx' autosuggest-execute
bindkey ' ' magic-space # do history expansion on space

# cancel menu with esc
zmodload -i zsh/complist
bindkey -M menuselect '^[' undo

# enable press up/down to navigate in history of a command
if (( ${+terminfo[smkx]} )) && (( ${+terminfo[rmkx]} )); then
  function zle-line-init() {
    echoti smkx
  }
  function zle-line-finish() {
    echoti rmkx
  }
  zle -N zle-line-init
  zle -N zle-line-finish
fi
# start typing + [Up-Arrow] - fuzzy find history forward
if [[ "${terminfo[kcuu1]}" != "" ]]; then
  autoload -U up-line-or-beginning-search
  zle -N up-line-or-beginning-search
  bindkey "${terminfo[kcuu1]}" up-line-or-beginning-search
fi
# start typing + [Down-Arrow] - fuzzy find history backward
if [[ "${terminfo[kcud1]}" != "" ]]; then
  autoload -U down-line-or-beginning-search
  zle -N down-line-or-beginning-search
  bindkey "${terminfo[kcud1]}" down-line-or-beginning-search
fi

# https://stackoverflow.com/questions/13341900/zsh-how-do-i-set-autocomplete-so-that-it-inserts-the-completion-when-cursor-is
# be able to press tab inside a word and use the prefix beginning-to-end) as
# word for completion
bindkey '^i' expand-or-complete-prefix

# -----------------------------------------------------------
source $HOME/dotfiles/terminal/commonshell.sh
# -----------------------------------------------------------

zstyle ':completion:*' list-colors ${(s.:.)LS_COLORS} # after LS_COLOR definition

export TMUXSHELL=/bin/zsh
[[ -f $HOME/.local/bin/zsh ]] && export TMUXSHELL=$HOME/.local/bin/zsh

[[ ! -f $HOME/.local/bin/zoxide ]] && curl -sS https://raw.githubusercontent.com/ajeetdsouza/zoxide/main/install.sh | bash
eval "$(zoxide init zsh)"

[ -f ~/.fzf.zsh ] && source ~/.fzf.zsh

# interactive cd using history of visited directories
bindkey -s '^G' 'zi^J'
